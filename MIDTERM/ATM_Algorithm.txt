Step 1: Start

Step 2: Define the necessary header files to be used in the program, such as "stdio.h", "stdlib.h", and a custom header file called "valdez.h".

Step 3: Define a constant named "initial_balance" with a value of 5000.00.

Step 4: Define a structure called "ATM_Struct" with four members: an integer called "pin_number", an integer called "account_num", a character pointer called "account_name", and a float called "account_balance".

Step 5: Define an array of structures called "accounts" with five elements of type "ATM_Struct". Each element contains an initial pin_number, account_num, account_name, and account_balance.

Step 6: Declare a global float variable called "balance".

Step 7: Declare four functions called "menu", "Bal_CHK", "withdraw", and "deposit", and one function called "exit_prog".

Step 8: In the main function, print a welcome message and enter an infinite loop.

Step 9: Inside the infinite loop, use the "get_int" function from "valdez.h" to get an integer input for the pin_number.

Step 10: Use a "for" loop to iterate through the "accounts" array to find an account with a matching pin_number.

Step 11: If a matching pin_number is found, set the "balance" variable to the "account_balance" of the current account, print a welcome message with the account_name, and call the "menu" function.

Step 12: If no matching pin_number is found, print an error message and continue to the next iteration of the loop.

Step 13: Inside the "menu" function, use a "while" loop to display a menu of options to the user using the "get_int" function to get an integer input from the user.

Step 14: Depending on the user's selection, either call the "Bal_CHK", "deposit", "withdraw", "main" (to change accounts), or "exit_prog" function.

Step 15: Inside the "Bal_CHK" function, print the current balance.

Step 16: Inside the "deposit" function, use the "get_float" function to get a float input from the user, add the input to the "balance" variable if it is positive, and print a success or error message.

Step 17: Inside the "withdraw" function, use the "get_float" function to get a float input from the user, subtract the input from the "balance" variable if it is positive and within the withdrawal limit, and print a success or error message.

Step 18: Inside the "exit_prog" function, print a goodbye message and exit the program.

Step 19: END